typ int : integer;

# iterative fibonacci
fun fib2(x : integer) : integer = (
	{fn = 1},
	{f1 = 1}, 
	{f2 = 1}, 
	{for i = 2, x, 1 : (
		{fn = f1 + f2}, 
		{f1 = f2}, 
		{f2 = fn}, 
		0
		)
	},
	fn
) {where var fn : integer; var f1 : integer; var f2 : integer; var i : integer};

# recursicve fibonacci
fun fib(x : integer) : integer = (
	{ if x < 2 then
		({rez = 1})
	else 
		({rez = fib(x - 1) + fib(x - 2)})
	},
	rez
) {where var rez : integer};

fun bubble(tab:arr[13] integer) : integer = (
	{for i = 0, 13, 1 :
		{for j = 0, 13, 1:
			{if tab[j] > tab[i] then 
				(
				{tmp = tab[j]},
				{tab[j] = tab[i]},
				{tab[i] = tmp},0
				) 
				{ where var tmp : integer} 
			}
		}
	},
	1
) { where var i : integer; var j : integer };

# binary search
fun binSearch(tab: arr[10] integer, begin : integer, end:integer, x : integer) : logical = (
	{ if end < begin then { result = false } 
	else
		({ pivot = begin + (end - begin) / 2 },
		{
		if tab[pivot] == x then 
			{result = true} 
		else 
			{
			if tab[pivot] < x then
				{result = binSearch(tab, pivot + 1, end, x)}
			else
				{result = binSearch(tab, begin, pivot - 1, x)}
			}
		})
	},
	result
) { where var pivot : integer; var result : logical };


# factorial
fun fact(x : integer) : integer = (
	{ if x == 0 then 
		{res = 1} 
	else
		{ if x == 1 then 
			{ res = 1 }
		else 
			{ res = fact(x - 1) * x }
		}
	},
	res
) { where var res : integer };


# gcd
fun gcd(x:integer, y:integer) : integer = (
	{ res = x },
	{ if y > 0 then {res = gcd(y, x % y) }},
	res
) { where var res : integer  };

fun partition(tab: arr[13] integer, low: integer, high: integer) : integer = (
    {pivot = tab[low]},
    {i = low - 1},
    {j = high + 1},
    {loop = true},
    {while loop == true:
    (
        {p = true},
        {while p == true:
        (
            {j = j - 1},
            {if tab[j] <= pivot then
                {p = false}
            }
        )
        },
        {p = true},
        {while p == true:
        (
            {i = i + 1},
            {if tab[i] >= pivot then
                {p = false}
            }
        )
        },
        {if i < j then
            (
                {tmp = tab[j]},
                {tab[j] = tab[i]},
                {tab[i] = tmp},0
            )
            { where var tmp : integer}
        else ({loop = false})
        }
    )
    },
	j
) { where var pivot: integer; var i: integer; var j: integer; var p: logical; var loop: logical };

fun quickSort(tab: arr[13] integer, low: integer, high: integer) : integer = (
    {if low < high then
    (
        {p = partition(tab, low, high)},
        quickSort(tab, low, p),
        quickSort(tab, p + 1, high)
    )
    },
    0
) { where var p: integer }
